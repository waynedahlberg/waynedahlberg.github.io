{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport Post from \"@/components/Post\";\nimport { waynedahlberg } from \"@/authors\";\nimport image01 from \"./swiftui-basics-01.jpg\";\nimport image02 from \"./swiftui-basics-02.jpg\";\nimport image03 from \"./swiftui-basics-03.jpg\";\nimport image04 from \"./swiftui-basics-04.jpg\";\nimport image05 from \"./swiftui-basics-05.jpg\";\nimport image06 from \"./swiftui-basics-06.jpg\";\nimport image07 from \"./swiftui-basics-07.jpg\";\nimport hero from \"./hero-swiftui-basics.png\";\nexport { getStaticProps } from \"@/getStaticProps\";\nexport const meta = {\n  title: `SwiftUI Basics`,\n  description: `The basics of the SwiftUI layout framework.`,\n  date: \"2020-11-08T12:00:00.000Z\",\n  authors: [waynedahlberg],\n  discussion: \"https://github.com/tailwindlabs/tailwindcss/discussions/2511\"\n};\nconst layoutProps = {\n  meta\n};\n\nconst MDXLayout = props => mdx(Post, _extends({\n  meta: meta\n}, props));\n\nexport default function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"img\", {\n    src: hero,\n    alt: \"Swiftui Basics hero image\"\n  }), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.apple.com/tutorials/swiftui?ref=madewithvuejs.com\"\n  }), `Apple`), ` describes SwiftUI is a modern way to declare user interfaces for any Apple platform. Unlike imperative UI layout tools like Interface Builder and Auto Layout, the declarative nature of SwiftUI Views allows developers to concentrate on composition and state.`), mdx(\"div\", {\n    class: \"rounded-md bg-blue-50 p-4\"\n  }, mdx(\"div\", {\n    class: \"flex\"\n  }, mdx(\"div\", {\n    class: \"flex-shrink-0\"\n  }, mdx(\"svg\", {\n    class: \"h-5 w-5 text-blue-400\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    fill: \"currentColor\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\",\n    clipRule: \"evenodd\"\n  }))), mdx(\"div\", {\n    class: \"ml-3 flex-1 md:flex md:justify-between\"\n  }, mdx(\"p\", {\n    class: \"text-sm leading-5 text-blue-700\"\n  }, \"This is a another post in a series intended as a personal growth exercise. As I learn and digest new things, I want to write about them to solidify my understanding.\"), mdx(\"p\", {\n    class: \"mt-3 text-sm leading-5 md:mt-0 md:ml-6\"\n  }, mdx(\"a\", {\n    href: \"https://fs.blog/2015/01/richard-feynman-knowing-something/\",\n    class: \"whitespace-no-wrap font-medium text-blue-700 hover:text-blue-600 transition ease-in-out duration-150\"\n  }, \"Feynman \\u2192\"))))), mdx(\"h3\", null, `Views`), mdx(\"p\", null, `SwiftUI Views are structures that conform to the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `View`), ` protocol, which requires a computed property called `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `body`), ` that holds the layout and hierarchy of the view. SwiftUI files can also contain an additional structure that declares the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `PreviewProvider`), ` for that view. The preview is useful for viewing live in Xcode and is ignored at compile time. In this example, the view contains a single `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Text()`), ` view with a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `.padding()`), ` modifer applied.`), mdx(\"pre\", {\n    \"className\": \"language-swift\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Swift\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), `struct`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `ContentView`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `:`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `View`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `{`), `\n    `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), `var`), ` body`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `:`), ` some `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `View`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `{`), `\n        `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), `Text`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `(`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), `\"Hello, world!\"`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `)`), `\n            `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `.`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), `padding`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `(`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `)`), `\n    `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `}`), `\n`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `}`), `\n\n`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), `struct`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `ContentView_Previews`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `:`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `PreviewProvider`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `{`), `\n    `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), `static`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), `var`), ` previews`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `:`), ` some `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `View`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `{`), `\n        `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), `ContentView`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `(`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `)`), `\n          `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `.`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), `previewLayout`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `(`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `.`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), `fixed`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `(`), `width`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `:`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `300`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `,`), ` height`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `:`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `200`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `)`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `)`), `\n    `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `}`), `\n`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `}`), `\n`)), mdx(\"img\", {\n    src: image01,\n    alt: \"basic views\"\n  }), mdx(\"h3\", null, `View Modifiers`), mdx(\"p\", null, `Using view modifiers, you can change the appearance of your views. Changing the text font with `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `.font()`), `, changing the background color with `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `.background()`), ` and alter the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `.padding()`), ` and corner radius of the view. These are just a few of the built-in modifiers in SwiftUI.`), mdx(\"pre\", {\n    \"className\": \"language-swift\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Swift\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), `struct`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `ContentView`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `:`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `View`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `{`), `\n    `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), `var`), ` body`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `:`), ` some `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `View`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `{`), `\n        `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), `Text`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `(`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), `\"Hello, world!\"`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `)`), `\n            `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `.`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), `foregroundColor`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `(`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `.`), `blue`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `)`), `\n            `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `.`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), `fontWeight`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `(`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `.`), `bold`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `)`), `\n            `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `.`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), `padding`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `(`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `)`), `\n            `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `.`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), `background`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `(`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `Color`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `.`), `black`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `.`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), `opacity`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `(`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `0.05`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `)`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `)`), `\n            `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `.`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), `cornerRadius`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `(`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `17`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `)`), `\n    `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `}`), `\n`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `}`), `\n`)), mdx(\"img\", {\n    src: image02,\n    alt: \"modifiers\"\n  }), mdx(\"p\", null, `It is possible to create our own view modifiers in SwiftUI using a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `ViewModifier`), `, but that's a topic for another post.`), mdx(\"h3\", null, `Lists`), mdx(\"p\", null, `We've seen an example of a text element above, but what about a list of text views? Let's create an array and iterate over it and display the results in a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `List`), ` view.`), mdx(\"pre\", {\n    \"className\": \"language-swift\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Swift\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), `struct`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `ContentView`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `:`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `View`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `{`), `\n    `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), `let`), ` fruits `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `=`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `[`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), `\"pineapple\"`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `,`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), `\"raspberry\"`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `,`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), `\"mango\"`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `,`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), `\"cherry\"`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `]`), `\n    `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), `var`), ` body`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `:`), ` some `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `View`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `{`), `\n      `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), `List`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `(`), `fruits`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `,`), ` id`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `:`), ` \\\\`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `.`), `hashValue`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `)`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `{`), ` fruit `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), `in`), `\n        `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), `Text`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `(`), `fruit`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `)`), `\n      `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `}`), `\n    `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `}`), `\n`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `}`), `\n`)), mdx(\"img\", {\n    src: image03,\n    alt: \"simple lists\"\n  }), mdx(\"h3\", null, `Navigation`), mdx(\"p\", null, `In UIKit, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `UINavigationController`), ` is used to push and pop views off the presentation layer. In SwiftUI, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `NavigationView`), ` handles this functionality with a `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `destination`), ` parameter.`), mdx(\"pre\", {\n    \"className\": \"language-swift\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Swift\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), `struct`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `ContentView`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `:`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `View`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `{`), `\n    `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), `let`), ` fruits `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `=`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `[`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), `\"One\"`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `,`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), `\"Two\"`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `,`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), `\"Three\"`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `]`), `\n    `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), `var`), ` body`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `:`), ` some `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `View`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `{`), `\n      `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `NavigationView`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `{`), `\n        `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), `List`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `(`), `fruits`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `,`), ` id`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `:`), ` \\\\`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `.`), `hashValue`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `)`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `{`), ` fruit `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), `in`), `\n          `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), `NavigationLink`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `(`), `destination`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `:`), `\n                          `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `VStack`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `{`), `\n                            `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), `Text`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `(`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), `\"Second view\"`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `)`), `\n                            `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), `Spacer`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `(`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `)`), `\n                          `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `}`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `)`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `{`), `\n            `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), `Text`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `(`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), `\"List item\"`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `)`), `\n          `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `}`), `\n        `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `}`), `\n        `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `.`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), `navigationBarTitle`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `(`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), `\"Navigation View\"`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `)`), `\n      `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `}`), `\n    `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `}`), `\n`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `}`), `\n`)), mdx(\"img\", {\n    src: image04,\n    alt: \"navigation view\"\n  }), mdx(\"img\", {\n    src: image05,\n    alt: \"destination view\"\n  }), mdx(\"h3\", null, `State`), mdx(\"p\", null, `One of the big shifts in logic with SwiftUI is how views handle state, or changes to their properties and data. SwiftUI views are a function of state. When a user interacts with a view, state can be changed. When state or data is changed, the entire view hierarchy is re-rendered, reflecting the new state of the application's data.`), mdx(\"p\", null, `SwiftUI needs a way to know if a property can be changed, and if so, broadcast those changes up the view chain. This is done with the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `@State`), ` property wrapper.`), mdx(\"pre\", {\n    \"className\": \"language-swift\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Swift\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), `struct`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `ContentView`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `:`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `View`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `{`), `\n  @`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `State`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), `private`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), `var`), ` username`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `:`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `String`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `=`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), `\"\"`), `\n\n  `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), `var`), ` body`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `:`), ` some `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `View`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `{`), `\n    `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), `VStack`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `{`), `\n      `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), `Text`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `(`), `username`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `)`), `\n      `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), `TextField`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `(`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), `\"username\"`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `,`), ` text`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `:`), ` $username`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `)`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `.`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), `multilineTextAlignment`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `(`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `.`), `center`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `)`), `\n    `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `}`), `\n  `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `}`), `\n`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), `}`), `\n`)), mdx(\"p\", null, `In the example above, the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `@State`), ` property wrapper will notify the parent view of any changes. To represent the State property within a view's parameters, `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `$`), ` is used as a prefix to the variable name. Whatever the user types into the textfield, the `, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, `Text`), ` element above will display the exact data.`), mdx(\"img\", {\n    src: image06,\n    alt: \"navigation view\"\n  }), mdx(\"img\", {\n    src: image07,\n    alt: \"destination view\"\n  }), mdx(\"h3\", null, `Conclusion`), mdx(\"p\", null, `SwiftUI brings with it a world of possiblities for developers of any experience. It's approachable for newcomers, and fairly complex for those looking to dive into this new declarative framework.`), mdx(\"p\", null, `This just a light sampling of the first things I learned last year when SwiftUI was announced at WWDC 2019. Many more posts to come on the subject.`), mdx(\"h3\", null, `Resources`), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Apple's official `, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://developer.apple.com/tutorials/swiftui/\"\n  }), `SwiftUI tutorial`), `.`), mdx(\"li\", {\n    parentName: \"ul\"\n  }, `Hacking With Swift - `, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.hackingwithswift.com/100/swiftui\"\n  }), `100 Days of SwiftUI`), `.`)));\n}\n;\nMDXContent.isMDXComponent = true;","map":null,"metadata":{},"sourceType":"module"}
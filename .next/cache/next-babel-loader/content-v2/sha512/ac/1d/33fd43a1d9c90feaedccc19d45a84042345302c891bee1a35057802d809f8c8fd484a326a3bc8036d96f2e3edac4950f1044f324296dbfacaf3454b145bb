{"ast":null,"code":"import _objectWithoutProperties from \"/Users/waynedahlberg/Blog/waynedahlberg.github.io/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"/Users/waynedahlberg/Blog/waynedahlberg.github.io/node_modules/@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport Post from \"@/components/Post\";\nimport { waynedahlberg } from \"@/authors\";\nimport image01 from \"./combine-marble-merge.jpg\";\nimport image02 from \"./combine-marble-map.jpg\";\nimport image03 from \"./combine-marble-first.jpg\";\nimport image04 from \"./combine-marble-last.jpg\";\nimport image05 from \"./combine-marble-count.jpg\";\nimport image06 from \"./combine-marble-debounce.jpg\";\nimport image07 from \"./combine-marble-zip.jpg\";\nimport hero from \"./hero-combine.png\";\nexport var __N_SSG = true;\nexport var meta = {\n  title: \"A Combine Primer\",\n  description: \"An Introduction to Combine.\",\n  date: \"2020-11-10T14:00:00.000Z\",\n  authors: [waynedahlberg],\n  discussion: \"https://github.com/tailwindlabs/tailwindcss/discussions/2511\"\n};\nvar layoutProps = {\n  meta: meta\n};\n\nvar MDXLayout = function MDXLayout(props) {\n  return mdx(Post, _extends({\n    meta: meta\n  }, props));\n};\n\nexport default function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"img\", {\n    src: hero,\n    alt: \"What is Combine? Apple's reactive programming framework.\"\n  }), mdx(\"p\", null, \"Combine is the new reactive programming framework from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.apple.com/documentation/combine\"\n  }), \"Apple\"), \". Like SwiftUI (which it pairs beautifully with), Combine is declarative. It provides tools for managing streams of your app's events over time, and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"react\"), \" accordingly. Because it has the blessing of Apple, you know it's here to stay.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"The Combine framework provides a declarative Swift API for processing values over time.\"), mdx(\"cite\", null, \"Apple Documentation\")), mdx(\"div\", {\n    \"class\": \"rounded-md bg-blue-50 p-4\"\n  }, mdx(\"div\", {\n    \"class\": \"flex\"\n  }, mdx(\"div\", {\n    \"class\": \"flex-shrink-0\"\n  }, mdx(\"svg\", {\n    \"class\": \"h-5 w-5 text-blue-400\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    fill: \"currentColor\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\",\n    clipRule: \"evenodd\"\n  }))), mdx(\"div\", {\n    \"class\": \"ml-3 flex-1 md:flex md:justify-between\"\n  }, mdx(\"p\", {\n    \"class\": \"text-sm leading-5 text-blue-700\"\n  }, \"This is a another post in a series intended as a personal growth exercise. As I learn and digest new things, it's productive to write about them to solidify my understanding.\"), mdx(\"p\", {\n    \"class\": \"mt-3 text-sm leading-5 md:mt-0 md:ml-6\"\n  }, mdx(\"a\", {\n    href: \"https://fs.blog/2015/01/richard-feynman-knowing-something/\",\n    \"class\": \"whitespace-no-wrap font-medium text-blue-700 hover:text-blue-600 transition ease-in-out duration-150\"\n  }, \"Feynman \\u2192\"))))), mdx(\"p\", null, \"Traditional imperative programming relies on many patterns for passing information between objects and processing multi-threaded event sequences. These patterns include delegates and callbacks, blocks, target-action relationships, key-value observing and dispatch queues just to name a few.\"), mdx(\"p\", null, \"These patterns (any many more) are tried and true in application development. However, as code reaches a certain level of complexity, or involves multiple delegates and asynchronous threads \\u2014 the likleyhood of bugs increases by orders of magnitude. These environments can make the exact state of your data total guesswork. This can lead to whack-a-mole scenarios, placing endless breakpoints in your code to deduce the flow of data over time.\"), mdx(\"p\", null, \"Combine operates above these traditional approaches to managing changing state in data flow. It uses functional reactive programming as first-class principles. Since it operates on multiple streams of data over time, it's built from the ground up for asynchronous programming \\u2014 thus eliminating entire categories of software bugs and exhaustive error handling.\"), mdx(\"p\", null, \"From what I've explored, Combine is not a all-or-nothing decision. It doesn't wholly replace imperative approaches, but rather augments them. You can determine where and when Combine makes sense in your situation. Use it to your advantage when faced with common tasks like networking and notifications.\"), mdx(\"h3\", null, \"Imperative approach\"), mdx(\"p\", null, \"Here we assign the value of a quantity of photos in an album to the text property of a label. This is how we would update the UI to show the state of the model.\"), mdx(\"pre\", {\n    \"className\": \"language-swift\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Swift\"\n  }), \"imageCountLabel\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \".\"), \"text \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"=\"), \" album\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \".\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), \"quantity\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"for\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" photo\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \")\"), \"\\n\")), mdx(\"p\", null, \"Although only one line of code, we now have to set up and manage a way to observe the changes in the model and update the UI, and vice-versa if considering user input.\"), mdx(\"h3\", null, \"Declarative approach\"), mdx(\"p\", null, \"The relationship between the label and the model is assigned, or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"declared\"), \", instead of triggered by an event.\"), mdx(\"pre\", {\n    \"className\": \"language-swift\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Swift\"\n  }), \"album\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \".\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), \"quantityPublisher\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"for\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" photo\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \")\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \".\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), \"assign\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"(\"), \"to\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \\\\\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \".\"), \"text\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \",\"), \" on\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" imageCountLabel\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \")\"), \"\\n\")), mdx(\"p\", null, \"Any time the quantity of the album publisher changes, the value of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"imageCountLabel\"), \" changes. Once this relationship is established, it will persist. This allows the complexity of multiple streams of data to be greatly simplified. All data in a stream, regardless of origin, lifespan, length, or type are treated the same.\"), mdx(\"p\", null, \"In an imperative approach, the more complexity you add, the more you open yourself up to bugs and unexpected behavior. With a declarative approach, data is easily transformed into an expected result, and managing its state over time becomes easier to understand and reason about.\"), mdx(\"h3\", null, \"Publisher, Operators & Subscribers\"), mdx(\"p\", null, \"To successfully use Combine, you need a few things first:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Publishers\"), \" expose values that can change over time. The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Publisher\"), \" protocol declares a \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"type\"), \" that delivers values over time.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Publishers have \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Operators\"), \" to act on the values received from the upstream publishers, transform (if necessary), and republish them.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Finally, after the entire chain of operators, a \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Subscriber\"), \" acts on elements as it receives them. Publishers only emit values when explicitly requested do so by subscribers. Without a subscriber, a publisher will never emit values. This puts your subscriber in control of how fast it receives events from its upstream publishers.\")), mdx(\"p\", null, \"Various Foundation types support Combine out of the box through publishers like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Timer\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NotificationCenter\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"URLSession\"), \". If you're using key-value observing, Combine provides a default publisher for any KVO compliant property.\"), mdx(\"p\", null, \"To get access to the data you need, it's trivial to chain together multiple publishers and coordinate their interaction. You can subscribe to updates from a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TextField\"), \" publisher and use them to perform a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"URLRequest\"), \". You could then use another publisher to process the responses from the request and use them to update your app.\"), mdx(\"p\", null, \"By \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"combining\"), \" all your event driven processes, your code will become easier to read and reason about. No longer are you relegated to the bug-ridden complexity of nested closure callbacks and indeterminate application state.\"), mdx(\"h3\", null, \"Marble Diagrams\"), mdx(\"p\", null, \"Marble diagrams are interactive diagrams that depict how reactive operators work with observable sequences. Let's look at some operators.\"), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \".map()\")), mdx(\"p\", null, \"Consider a stream of values \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[1, 2, 3]\"), \" with an opeartor of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"map { $0 * $0 }\"), \":\"), mdx(\"img\", {\n    src: image02,\n    alt: \"Marble diagram - Map\"\n  }), mdx(\"p\", null, \"The top line is the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"upstream publisher\"), \".\"), mdx(\"p\", null, \"The middle container is the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"operator\"), \" that transforms values of the upstream publisher.\"), mdx(\"p\", null, \"The bottom line is a \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"publisher\"), \" of new values, output from the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"operator\"), \".\"), mdx(\"p\", null, \"Get to know the common operators. They are your secret weapons. The more you are familiar with, the better you're able to transform streams of data into the results you're looking for.\"), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \".merge()\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".merge()\"), \" operator needs \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"two\"), \" upstream publishers that emit values of the same type. The error types also have to be the same.\"), mdx(\"img\", {\n    src: image01,\n    alt: \"Marble diagram - Merge\"\n  }), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \".first()\")), mdx(\"p\", null, \"This one is pretty self explanitory. After the first value is emitted, a completion event is emitted and sent down to the subscriber.\"), mdx(\"img\", {\n    src: image03,\n    alt: \"Marble diagram - First\"\n  }), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \".last()\")), mdx(\"p\", null, \"Very similar to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".first()\"), \", but has one caveat. It is dependent on receiving a completion event from the upstream publisher to know that the sequence has finished, and to return the last emitted value. See how the output value is inline with the completion event in the upstream publisher.\"), mdx(\"img\", {\n    src: image04,\n    alt: \"Marble diagram - Last\"\n  }), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \".debounce()\")), mdx(\"p\", null, \"In electrical engineering, when a switch opens and closes, the switch contacts can bounce off each other before the switch completely transitions to an on or off state. The bouncing action can produce transient signals that do not represent a true change in state. When reproducing switch logic, it's important to filter out transient signals by using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"debounce\"), \", which adds the element of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"time\"), \" to the equation.\"), mdx(\"p\", null, \"A time value is emitted if (0) isn't emitted immediately. If (1) is emitted with the time threshold (x \", \"*\", \" 10), the emitted value is now re-calculated and (1) appears shortly later in the downstream publisher.\"), mdx(\"img\", {\n    src: image06,\n    alt: \"Marble diagram - Debounce\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".debounce()\"), \" is great for returning live results. It can rate-limit the number of API calls between typed letters in input fields. It can provide a better experience when displaying search results when it's best for the user to expect them. This is a first-class operator in Combine.\"), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \".count()\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".count()\"), \" is another operator that emits after receiving an upstream completion event. Once that event is received, it gives a count of how many of the upstream values satisfy the criteria given, in this case, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x > 10\"), \". Three values in the upstream publisher are greater than 10, so our result is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"3\"), \".\"), mdx(\"img\", {\n    src: image05,\n    alt: \"Marble diagram - Count\"\n  }), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \".zip()\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".zip()\"), \" is a more complicated operator, but it is still first-class. It pairs elements of two streams together. Once it receives a matched pair, it emits the combined pair downstream. It will wait until it can emit a valid pair, even if it receives multiple values on a single stream. It keeps track of the order they were received. Once another comes along to satisfy the pair, it emits that pair downstream and keeps going until it receives a completion event from the upstream publisher. Any and all unpaired values are discarded.\"), mdx(\"p\", null, \"Paris can be the same or different types. This is because the result of the operator creates a new compound type from both types. Strings and Ints, Floats and Doubles.\"), mdx(\"img\", {\n    src: image07,\n    alt: \"Marble diagram - Zip\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".zip\"), \" could be useful if you have two API calls to make, and you only want to continue when they are both present and valid.\"), mdx(\"hr\", null), mdx(\"p\", null, \"These are a few of the standard operators possible with Combine. There are many others to play with and discover. Some you'll find interesting, others not so much. Check out \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://rxmarbles.com/\"\n  }), \"RxMarbles.com\"), \" for a comprehensive list of reactive operators.\"), mdx(\"span\", {\n    className: \"text-gray-200 text-3xl font-extrabold\"\n  }, \"***DRAFT***\"));\n}\n;\nMDXContent.isMDXComponent = true;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectWithoutProperties from \"/Users/waynedahlberg/Blog/waynedahlberg.github.io/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"/Users/waynedahlberg/Blog/waynedahlberg.github.io/node_modules/@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport Post from \"@/components/Post\";\nimport { waynedahlberg } from '@/authors';\nimport hero from './hero-numbers.png';\nexport var __N_SSG = true;\nexport var meta = {\n  title: \"Swift Number Formatting\",\n  description: \"The basics of Swift Number formatting.\",\n  date: '2020-12-02T12:00:00.000Z',\n  authors: [waynedahlberg],\n  discussion: 'https://github.com/tailwindlabs/tailwindcss/discussions/2511'\n};\nvar layoutProps = {\n  meta: meta\n};\n\nvar MDXLayout = function MDXLayout(props) {\n  return mdx(Post, _extends({\n    meta: meta\n  }, props));\n};\n\nexport default function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"img\", {\n    src: hero,\n    alt: \"Swift Ranges hero image\"\n  }), mdx(\"p\", null, \"Numbers are everywhere. They come in many different flavors. Currency, dates, scientific, etc. Computers are excellent and reading and interpreting the way numbers are expressed, humans less so. That's why we need to take the numbers that a computer understands and package them up in a way that makes sense to an average user.\"), mdx(\"div\", {\n    \"class\": \"rounded-md bg-blue-50 p-4\"\n  }, mdx(\"div\", {\n    \"class\": \"flex\"\n  }, mdx(\"div\", {\n    \"class\": \"flex-shrink-0\"\n  }, mdx(\"svg\", {\n    \"class\": \"h-5 w-5 text-blue-400\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    fill: \"currentColor\"\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\",\n    clipRule: \"evenodd\"\n  }))), mdx(\"div\", {\n    \"class\": \"ml-3 flex-1 md:flex md:justify-between\"\n  }, mdx(\"p\", {\n    \"class\": \"text-sm leading-5 text-blue-700\"\n  }, \"This is a another post in a series intended as a personal growth exercise. As I learn and digest new things, I want to write about them to solidify my understanding.\"), mdx(\"p\", {\n    \"class\": \"mt-3 text-sm leading-5 md:mt-0 md:ml-6\"\n  }, mdx(\"a\", {\n    href: \"https://fs.blog/2015/01/richard-feynman-knowing-something/\",\n    \"class\": \"whitespace-no-wrap font-medium text-blue-700 hover:text-blue-600 transition ease-in-out duration-150\"\n  }, \"Feynman \\u2192\"))))), mdx(\"h2\", null, \"Presention\"), mdx(\"p\", null, \"The simplest way of representing a readable number is by using a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"String\"), \".\"), mdx(\"pre\", {\n    \"className\": \"language-swift\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Swift\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"let\"), \" x \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), \"\\\"5\\\"\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"let\"), \" y \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), \"\\\"5.11\\\"\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"let\"), \" z \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), \"\\\"\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"\"\n  }), \"\\\\(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"\"\n  }), \"5\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"\"\n  }), \")\")), \", \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"\"\n  }), \"\\\\(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"\"\n  }), \"5.11\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"\"\n  }), \")\")), \"\\\"\"), \"\\n\")), mdx(\"p\", null, \"Okay, that works but it's not very usable. We need a more full-featured approach dealing with numbers we can control. Let's define a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Capacity\"), \" type that lets create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Double\"), \" with a name, which we can present as a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"description\"), \".\"), mdx(\"pre\", {\n    \"className\": \"language-swift\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Swift\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"struct\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"Capacity\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"Codable\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"{\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"var\"), \" name\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"String\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"var\"), \" value\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"Double\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"}\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"extension\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"Capacity\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"CustomStringConvertbile\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"{\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"var\"), \" description\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"String\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"{\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), \"\\\"\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"\"\n  }), \"\\\\(\"), \"name\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"\"\n  }), \")\")), \": \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"\"\n  }), \"\\\\(\"), \"value\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"\"\n  }), \")\")), \"\\\"\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"}\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"}\"), \"\\n\")), mdx(\"p\", null, \"Now we're getting somewhere. But we still need to use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Double\"), \" in a way that is more presentable. We need the decimal for precision, but we need a cutoff. Let's use 2 decimal places.\"), mdx(\"pre\", {\n    \"className\": \"language-swift\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Swift\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"extension\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"Capacity\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"CustomStringConvertbile\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"{\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"var\"), \" description\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"String\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"{\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"let\"), \" formattedValue \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), \"String\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"(\"), \"format\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), \"\\\"%.2f\\\"\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \",\"), \" value\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \")\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"return\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), \"\\\"\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"\"\n  }), \"\\\\(\"), \"name\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"\"\n  }), \")\")), \": \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"\"\n  }), \"\\\\(\"), \"formattedValue\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"\"\n  }), \")\")), \"\\\"\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"}\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"}\"), \"\\n\")), mdx(\"p\", null, \"This will always output 2 decimal places, even when the value is 2.00. Again, we can dive a little deeper with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NumberFormatter\"), \".\"), mdx(\"h3\", null, \"NumberFormatter\"), mdx(\"p\", null, \"Let's format our number to show decimals when it has a decimal value, and remove the \\\".\\\" and trailing \\\"00\\\" when it's a whole number equivalent. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NumberFormatter\"), \" allows us to present a decimal with a max number of trailing digits. This will give us \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"81\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"81.8\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"81.83\"), \" presented just like that. The precision level will included the necessary trailing digits up to a given maximum, and then simply rounded off.\"), mdx(\"pre\", {\n    \"className\": \"language-swift\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Swift\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"extension\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"Capacity\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"CustomStringConvertbile\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"{\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"var\"), \" description\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"String\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"let\"), \" formatter \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), \"NumberFormatter\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \")\"), \"\\n    formatter\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \".\"), \"numberStyle \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \".\"), \"decimal\\n    formatter\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \".\"), \"maximumFractionDigits \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"2\"), \"\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"let\"), \" number \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), \"NSNumber\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"(\"), \"value\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" value\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \")\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"let\"), \" formattedValue \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"=\"), \" formatter\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \".\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), \"string\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"(\"), \"from\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" number\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"!\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"return\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }), \"\\\"\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"\"\n  }), \"\\\\(\"), \"name\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"\"\n  }), \")\")), \" : \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"\"\n  }), \"\\\\(\"), \"formattedValue\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"\"\n  }), \")\")), \"\\\"\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"}\"), \"\\n\")), mdx(\"p\", null, \"When using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NumberFormatter\"), \" you can take into account the user's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Locale\"), \" in order to present numbers with more context. In the US, we see the number \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"12345.67\"), \" while the same number viewed on a device in Europe will look like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"12 345,67\"), \". Other locales may present it as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"12,345.67\"), \". We get all that beautiful regional formatting for free when using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"NumberFormatter\"), \".\"), mdx(\"h3\", null, \"Domain specificity\"), mdx(\"p\", null, \"Depending on our needs, we'll need to deal with \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"domain-specific\"), \" that hold additional features. If we're working on a Restaurant application and dealing with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Double\"), \", we can wrap the value in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Price\"), \" struct to better describe the cost of items on the menu.\"), mdx(\"pre\", {\n    \"className\": \"language-swift\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Swift\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"struct\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"MenuItem\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"Codable\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"{\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"var\"), \" name\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"String\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"var\"), \" price\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"Price\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"}\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"struct\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"Price\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"Codable\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"{\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"var\"), \" amount\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"Double\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"var\"), \" currency\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"Currency\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"}\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"enum\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"Currency\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"String\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \",\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"Codable\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"{\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"case\"), \" eur\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"case\"), \" usd\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"case\"), \" mx\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"case\"), \" cad\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"}\"), \"\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"extension\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"Price\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"CustomStringConvertbile\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"{\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"var\"), \" description\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"String\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"{\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"let\"), \" formatter \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), \"NumberFormatter\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \")\"), \"\\n    formatter\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \".\"), \"numberStyle \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \".\"), \"currency\\n    formatter\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \".\"), \"currencyCode \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"=\"), \" currency\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \".\"), \"rawValue\\n    formatter\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \".\"), \"maximumFractionDigits \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"2\"), \"\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"let\"), \" number \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), \"NSNumber\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"(\"), \"value\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" amount\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \")\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"return\"), \" formatter\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \".\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), \"string\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"(\"), \"from\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" number\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \")\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"!\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"}\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"}\"), \"\\n\")), mdx(\"p\", null, \"With the above \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Price\"), \" type fully defined, let's look at the number \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"8.99\"), \" as defined by the type in different locales.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sweden: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"8,99 usd\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Spain: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"8.99 USD\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"US: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"USD 8.99\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"France: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"USD 8,99\"))), mdx(\"p\", null, \"Even though the differences are slight, it can be very important when creating a storefront that works as desired in many different locales.\"), mdx(\"hr\", null), mdx(\"p\", null, \"Formatting numbers as human-readable strings is something we want to rely on the system for, especially when dealing with user locale. Casting a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Double\"), \" as a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"String\"), \" may seem trivial, but formatting the value into the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"correct\"), \" string is much more difficult than it appears.\"));\n}\n;\nMDXContent.isMDXComponent = true;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport Post from \"@/components/Post\";\nimport { waynedahlberg } from \"@/authors\";\nimport image1 from \"./IMG_8470.jpg\";\nimport image2 from \"./radarEye.jpg\";\nimport image3 from \"./CSL_RadarEye_Rev1.png\";\nexport { getStaticProps } from \"@/getStaticProps\";\nexport const meta = {\n  title: `Radar Eye`,\n  description: `The eye has it.`,\n  date: \"2016-03-15T14:24:00.000Z\",\n  authors: [waynedahlberg],\n  discussion: \"https://github.com/tailwindlabs/tailwindcss/discussions/2511\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\n\nconst layoutProps = {\n  meta\n};\n\nconst MDXLayout = props => mdx(Post, _extends({\n  meta: meta\n}, props));\n\nexport default function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `I’ve been very interested in 3d printing lately. The R2 Radar Eye is on the top of my list as a 3d printed part candidate.`), mdx(\"p\", null, `I sent the file to `, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.instagram.com/hillmanjason/\"\n  }), `Jason Hillman`), `, a coworker’s brother who built his own delta 3d printer. He graciously accepted the challenge and set up a web cam that I could check on the progress of the 14 hour print. The curvature of the dome fits the print curvature exactly. Thank you, Jason! Next steps for the Radar Eye are bondo, lots of sanding, a base primer for metallics, and the secret sauce blue dome paint.`), mdx(\"img\", {\n    src: image3,\n    alt: \"radar eye\"\n  }), mdx(\"img\", {\n    src: image2,\n    alt: \"radar eye\"\n  }), mdx(\"img\", {\n    src: image1,\n    alt: \"radar eye\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","map":null,"metadata":{},"sourceType":"module"}
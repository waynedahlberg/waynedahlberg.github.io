{"ast":null,"code":"var _jsxFileName = \"/Users/waynedahlberg/Blog/waynedahlberg.github.io/src/pages/110720-swift-types/index.mdx\";\nvar __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport Post from \"@/components/Post\";\nimport { waynedahlberg } from \"@/authors\";\nexport { getStaticProps } from \"@/getStaticProps\";\nexport const meta = {\n  title: `Swift Types`,\n  description: `Back to basics with Swift types`,\n  date: \"2020-11-07T12:00:00.000Z\",\n  authors: [waynedahlberg],\n  discussion: \"https://github.com/tailwindlabs/tailwindcss/discussions/2511\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 10\n    }\n  }));\n};\n\nconst layoutProps = {\n  meta\n};\n\nconst MDXLayout = props => mdx(Post, _extends({\n  meta: meta\n}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 30\n  }\n}));\n\nexport default function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 10\n    }\n  }), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, `In the Swift programming language, nearly everything is based on a named type or compound type. Named types can be assigned names when created. These include `, mdx(\"em\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 170\n    }\n  }, `classes`), `, `, mdx(\"em\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 211\n    }\n  }, `structures`), `, `, mdx(\"em\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 255\n    }\n  }, `enumerations`), `, and `, mdx(\"em\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 305\n    }\n  }, `protocols`), `. Instances of user-defined named types carry the name of the given type. For example, a class named `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 447\n    }\n  }, `MyClass`), ` will have the type `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 522\n    }\n  }, `MyClass`), `. Swift also includes many standard named types for arrays, dictionaries and optional values.`), mdx(\"div\", {\n    class: \"rounded-md bg-blue-50 p-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, mdx(\"div\", {\n    class: \"flex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 3\n    }\n  }, mdx(\"div\", {\n    class: \"flex-shrink-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, mdx(\"svg\", {\n    class: \"h-5 w-5 text-blue-400\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 20 20\",\n    fill: \"currentColor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, mdx(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\",\n    clipRule: \"evenodd\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }))), mdx(\"div\", {\n    class: \"ml-3 flex-1 md:flex md:justify-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, mdx(\"p\", {\n    class: \"text-sm leading-5 text-blue-700\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, \"This post is the first of several intended a personal growth exercise. As I learn and digest new things, I want to write about them to further cement my understanding and hold myself accountable.\"), mdx(\"p\", {\n    class: \"mt-3 text-sm leading-5 md:mt-0 md:ml-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, mdx(\"a\", {\n    href: \"https://fs.blog/2015/01/richard-feynman-knowing-something/\",\n    class: \"whitespace-no-wrap font-medium text-blue-700 hover:text-blue-600 transition ease-in-out duration-150\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, \"Knowing\", mdx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }), \"vs.\", mdx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }), \"understanding \\u2192\"))))), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, `Compound types are types without a specific name. A compound type may contain other named and compound types. For example, the compound tuple type `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 159\n    }\n  }, `(Int, (Int, Int))`), ` contains two inner types. The first is the named `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 274\n    }\n  }, `Int`), ` type, the second is a compount type of `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 365\n    }\n  }, `(Int, Int)`), `.`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, `Properties are either stored, or computed. A stored property has a fixed value. On the other hand, a computed property is calculated every time it is are accessed. There are also simple observers on properties that listen to changes via callbacks. These observers are `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 280\n    }\n  }, `willSet`), ` and `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 340\n    }\n  }, `didSet`), `.`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, `This was very difficult for me to wrap my head around in my early Swift learning days.`), mdx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, `Value types vs Reference types`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, `When a piece of data is saved to disk, it is saved in a container. Imagine each container having a label on the outside. Value types refer to the `, mdx(\"em\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 158\n    }\n  }, `actual data`), ` inside the container. Reference types refer to the label, or `, mdx(\"em\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 263\n    }\n  }, `memory address`), ` on the container.`), mdx(\"pre\", _extends({\n    \"className\": \"language-swift\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Swift\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 8\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 10\n    }\n  }), `class`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 33\n    }\n  }), `SimpleClass`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 39\n    }\n  }), `{`), `\n    `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), `var`), ` name `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 36\n    }\n  }), `=`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 29\n    }\n  }), `\"\"`), `\n`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 3\n    }\n  }), `}`), `\n\n`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 3\n    }\n  }), `struct`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 34\n    }\n  }), `SimpleStruct`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 40\n    }\n  }), `{`), `\n    `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }), `var`), ` name `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 36\n    }\n  }), `=`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 29\n    }\n  }), `\"\"`), `\n`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 3\n    }\n  }), `}`), `\n\n`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-gray-400 italic\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 3\n    }\n  }), `// Memory address is constant but data is variable`), `\n`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 3\n    }\n  }), `let`), ` simpleClass `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 43\n    }\n  }), `=`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 29\n    }\n  }), `SimpleClass`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 34\n    }\n  }), `(`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 24\n    }\n  }), `)`), `\nsimpleClass`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 14\n    }\n  }), `.`), `name `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 33\n    }\n  }), `=`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 29\n    }\n  }), `\"wayne\"`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-gray-400 italic\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 35\n    }\n  }), `// OK`), `\n\n`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-gray-400 italic\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 3\n    }\n  }), `// Data is constant but address is variable`), `\n`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 3\n    }\n  }), `let`), ` simpleStruct `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 44\n    }\n  }), `=`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 29\n    }\n  }), `SimpleStruct`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 35\n    }\n  }), `(`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 24\n    }\n  }), `)`), `\nsimpleStruct`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 15\n    }\n  }), `.`), `name `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 33\n    }\n  }), `=`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-green\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 29\n    }\n  }), `\"wayne\"`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-gray-400 italic\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 35\n    }\n  }), `// Compiler error`), `\n`)), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }\n  }, `So here we have a constant (let) `, mdx(\"em\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 45\n    }\n  }, `class`), ` instance with a constant memory address, but its data is variable and can change at any time. This was a huge eye opener for me to learn early on.`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 5\n    }\n  }, `However, a constant (let) `, mdx(\"em\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 38\n    }\n  }, `structure`), ` instance has constant data, but a variable memory address. It will throw a compiler error every time the constant structure is changed.`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }\n  }, `Convention tells us to use `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 39\n    }\n  }, `struct`), ` primarily, but should opt for `, mdx(\"inlineCode\", {\n    parentName: \"p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 124\n    }\n  }, `class`), ` when our code is designed for instances, as well as interfacing with legacy Objective-C code.`), mdx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 5\n    }\n  }, `Computed Properties — Getters & Setters`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 5\n    }\n  }, `Computed properties have special functions for getting and setting of property values. It's value is determined by the getter function every time it's accessed, instead of some stored property with a specific value.`), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 5\n    }\n  }, `Getter functions can retrieve data from storage and setter functions can assign the data to storage directly.`), mdx(\"pre\", _extends({\n    \"className\": \"language-swift\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 5\n    }\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Swift\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 8\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 10\n    }\n  }), `var`), ` randomInteger`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 44\n    }\n  }), `:`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 29\n    }\n  }), `Int`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 31\n    }\n  }), `{`), `\n  `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 5\n    }\n  }), `get`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 31\n    }\n  }), `{`), `\n    `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }\n  }), `return`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 34\n    }\n  }), `100`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 31\n    }\n  }), `*`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 29\n    }\n  }), `Int`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 26\n    }\n  }), `.`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 24\n    }\n  }), `random`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 29\n    }\n  }), `(`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 24\n    }\n  }), `in`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 25\n    }\n  }), `:`), ` `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 29\n    }\n  }), `0`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 24\n    }\n  }), `.`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 24\n    }\n  }), `.`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 24\n    }\n  }), `.`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 24\n    }\n  }), `10`), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 25\n    }\n  }), `)`), `\n  `, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 5\n    }\n  }), `}`), `\n`, mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 3\n    }\n  }), `}`), `\n`)), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 5\n    }\n  }, `Setter functions are optional in computed properties. When no setter function is defined, it's treated as a normal stored, read-only property.`), mdx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 5\n    }\n  }, `Summary`), mdx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 5\n    }\n  }, mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }\n  }, `Reference type instance points to the memory address, not the data`), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }\n  }, `Value type instance points to the data but not the memory address`), mdx(\"li\", {\n    parentName: \"ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }\n  }, `Getter and setter functions are called when computed properties are accessed or modified.`)));\n}\n;\nMDXContent.isMDXComponent = true;","map":{"version":3,"sources":["/Users/waynedahlberg/Blog/waynedahlberg.github.io/src/pages/110720-swift-types/index.mdx"],"names":["React","mdx","Post","waynedahlberg","getStaticProps","meta","title","description","date","authors","discussion","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":"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","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport Post from \"@/components/Post\"\n\nimport { waynedahlberg } from \"@/authors\";\nexport { getStaticProps } from \"@/getStaticProps\";\nexport const meta = {\n  title: `Swift Types`,\n  description: `Back to basics with Swift types`,\n  date: \"2020-11-07T12:00:00.000Z\",\n  authors: [waynedahlberg],\n  discussion: \"https://github.com/tailwindlabs/tailwindcss/discussions/2511\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  meta\n};\nconst MDXLayout = (props) => <Post meta={meta} {...props} />\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <p>{`In the Swift programming language, nearly everything is based on a named type or compound type. Named types can be assigned names when created. These include `}<em parentName=\"p\">{`classes`}</em>{`, `}<em parentName=\"p\">{`structures`}</em>{`, `}<em parentName=\"p\">{`enumerations`}</em>{`, and `}<em parentName=\"p\">{`protocols`}</em>{`. Instances of user-defined named types carry the name of the given type. For example, a class named `}<inlineCode parentName=\"p\">{`MyClass`}</inlineCode>{` will have the type `}<inlineCode parentName=\"p\">{`MyClass`}</inlineCode>{`. Swift also includes many standard named types for arrays, dictionaries and optional values.`}</p>\n    <div class=\"rounded-md bg-blue-50 p-4\">\n  <div class=\"flex\">\n    <div class=\"flex-shrink-0\">\n      <svg class=\"h-5 w-5 text-blue-400\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n        <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clipRule=\"evenodd\" />\n      </svg>\n    </div>\n    <div class=\"ml-3 flex-1 md:flex md:justify-between\">\n      <p class=\"text-sm leading-5 text-blue-700\">\n        This post is the first of several intended a personal growth exercise.\n        As I learn and digest new things, I want to write about them to further\n        cement my understanding and hold myself accountable.\n      </p>\n      <p class=\"mt-3 text-sm leading-5 md:mt-0 md:ml-6\">\n        <a href=\"https://fs.blog/2015/01/richard-feynman-knowing-something/\" class=\"whitespace-no-wrap font-medium text-blue-700 hover:text-blue-600 transition ease-in-out duration-150\">\n          Knowing\n          <br />\n          vs.\n          <br />\n          understanding &rarr;\n        </a>\n      </p>\n    </div>\n  </div>\n    </div>\n    <p>{`Compound types are types without a specific name. A compound type may contain other named and compound types. For example, the compound tuple type `}<inlineCode parentName=\"p\">{`(Int, (Int, Int))`}</inlineCode>{` contains two inner types. The first is the named `}<inlineCode parentName=\"p\">{`Int`}</inlineCode>{` type, the second is a compount type of `}<inlineCode parentName=\"p\">{`(Int, Int)`}</inlineCode>{`.`}</p>\n    <p>{`Properties are either stored, or computed. A stored property has a fixed value. On the other hand, a computed property is calculated every time it is are accessed. There are also simple observers on properties that listen to changes via callbacks. These observers are `}<inlineCode parentName=\"p\">{`willSet`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`didSet`}</inlineCode>{`.`}</p>\n    <p>{`This was very difficult for me to wrap my head around in my early Swift learning days.`}</p>\n    <h3>{`Value types vs Reference types`}</h3>\n    <p>{`When a piece of data is saved to disk, it is saved in a container. Imagine each container having a label on the outside. Value types refer to the `}<em parentName=\"p\">{`actual data`}</em>{` inside the container. Reference types refer to the label, or `}<em parentName=\"p\">{`memory address`}</em>{` on the container.`}</p>\n    <pre {...{\n      \"className\": \"language-swift\"\n    }}><code parentName=\"pre\" {...{\n        \"className\": \"language-Swift\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"text-code-purple\"\n        }}>{`class`}</span>{` `}<span parentName=\"code\" {...{\n          \"className\": \"\"\n        }}>{`SimpleClass`}</span>{` `}<span parentName=\"code\" {...{\n          \"className\": \"text-code-white\"\n        }}>{`{`}</span>{`\n    `}<span parentName=\"code\" {...{\n          \"className\": \"text-code-purple\"\n        }}>{`var`}</span>{` name `}<span parentName=\"code\" {...{\n          \"className\": \"\"\n        }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n          \"className\": \"text-code-green\"\n        }}>{`\"\"`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"text-code-white\"\n        }}>{`}`}</span>{`\n\n`}<span parentName=\"code\" {...{\n          \"className\": \"text-code-purple\"\n        }}>{`struct`}</span>{` `}<span parentName=\"code\" {...{\n          \"className\": \"\"\n        }}>{`SimpleStruct`}</span>{` `}<span parentName=\"code\" {...{\n          \"className\": \"text-code-white\"\n        }}>{`{`}</span>{`\n    `}<span parentName=\"code\" {...{\n          \"className\": \"text-code-purple\"\n        }}>{`var`}</span>{` name `}<span parentName=\"code\" {...{\n          \"className\": \"\"\n        }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n          \"className\": \"text-code-green\"\n        }}>{`\"\"`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"text-code-white\"\n        }}>{`}`}</span>{`\n\n`}<span parentName=\"code\" {...{\n          \"className\": \"text-gray-400 italic\"\n        }}>{`// Memory address is constant but data is variable`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"text-code-purple\"\n        }}>{`let`}</span>{` simpleClass `}<span parentName=\"code\" {...{\n          \"className\": \"\"\n        }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n          \"className\": \"text-code-blue\"\n        }}>{`SimpleClass`}</span><span parentName=\"code\" {...{\n          \"className\": \"text-code-white\"\n        }}>{`(`}</span><span parentName=\"code\" {...{\n          \"className\": \"text-code-white\"\n        }}>{`)`}</span>{`\nsimpleClass`}<span parentName=\"code\" {...{\n          \"className\": \"text-code-white\"\n        }}>{`.`}</span>{`name `}<span parentName=\"code\" {...{\n          \"className\": \"\"\n        }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n          \"className\": \"text-code-green\"\n        }}>{`\"wayne\"`}</span>{` `}<span parentName=\"code\" {...{\n          \"className\": \"text-gray-400 italic\"\n        }}>{`// OK`}</span>{`\n\n`}<span parentName=\"code\" {...{\n          \"className\": \"text-gray-400 italic\"\n        }}>{`// Data is constant but address is variable`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"text-code-purple\"\n        }}>{`let`}</span>{` simpleStruct `}<span parentName=\"code\" {...{\n          \"className\": \"\"\n        }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n          \"className\": \"text-code-blue\"\n        }}>{`SimpleStruct`}</span><span parentName=\"code\" {...{\n          \"className\": \"text-code-white\"\n        }}>{`(`}</span><span parentName=\"code\" {...{\n          \"className\": \"text-code-white\"\n        }}>{`)`}</span>{`\nsimpleStruct`}<span parentName=\"code\" {...{\n          \"className\": \"text-code-white\"\n        }}>{`.`}</span>{`name `}<span parentName=\"code\" {...{\n          \"className\": \"\"\n        }}>{`=`}</span>{` `}<span parentName=\"code\" {...{\n          \"className\": \"text-code-green\"\n        }}>{`\"wayne\"`}</span>{` `}<span parentName=\"code\" {...{\n          \"className\": \"text-gray-400 italic\"\n        }}>{`// Compiler error`}</span>{`\n`}</code></pre>\n    <p>{`So here we have a constant (let) `}<em parentName=\"p\">{`class`}</em>{` instance with a constant memory address, but its data is variable and can change at any time. This was a huge eye opener for me to learn early on.`}</p>\n    <p>{`However, a constant (let) `}<em parentName=\"p\">{`structure`}</em>{` instance has constant data, but a variable memory address. It will throw a compiler error every time the constant structure is changed.`}</p>\n    <p>{`Convention tells us to use `}<inlineCode parentName=\"p\">{`struct`}</inlineCode>{` primarily, but should opt for `}<inlineCode parentName=\"p\">{`class`}</inlineCode>{` when our code is designed for instances, as well as interfacing with legacy Objective-C code.`}</p>\n    <h3>{`Computed Properties — Getters & Setters`}</h3>\n    <p>{`Computed properties have special functions for getting and setting of property values. It's value is determined by the getter function every time it's accessed, instead of some stored property with a specific value.`}</p>\n    <p>{`Getter functions can retrieve data from storage and setter functions can assign the data to storage directly.`}</p>\n    <pre {...{\n      \"className\": \"language-swift\"\n    }}><code parentName=\"pre\" {...{\n        \"className\": \"language-Swift\"\n      }}><span parentName=\"code\" {...{\n          \"className\": \"text-code-purple\"\n        }}>{`var`}</span>{` randomInteger`}<span parentName=\"code\" {...{\n          \"className\": \"text-code-white\"\n        }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n          \"className\": \"\"\n        }}>{`Int`}</span>{` `}<span parentName=\"code\" {...{\n          \"className\": \"text-code-white\"\n        }}>{`{`}</span>{`\n  `}<span parentName=\"code\" {...{\n          \"className\": \"text-code-purple\"\n        }}>{`get`}</span>{` `}<span parentName=\"code\" {...{\n          \"className\": \"text-code-white\"\n        }}>{`{`}</span>{`\n    `}<span parentName=\"code\" {...{\n          \"className\": \"text-code-purple\"\n        }}>{`return`}</span>{` `}<span parentName=\"code\" {...{\n          \"className\": \"\"\n        }}>{`100`}</span>{` `}<span parentName=\"code\" {...{\n          \"className\": \"\"\n        }}>{`*`}</span>{` `}<span parentName=\"code\" {...{\n          \"className\": \"\"\n        }}>{`Int`}</span><span parentName=\"code\" {...{\n          \"className\": \"text-code-white\"\n        }}>{`.`}</span><span parentName=\"code\" {...{\n          \"className\": \"text-code-blue\"\n        }}>{`random`}</span><span parentName=\"code\" {...{\n          \"className\": \"text-code-white\"\n        }}>{`(`}</span><span parentName=\"code\" {...{\n          \"className\": \"text-code-purple\"\n        }}>{`in`}</span><span parentName=\"code\" {...{\n          \"className\": \"text-code-white\"\n        }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n          \"className\": \"\"\n        }}>{`0`}</span><span parentName=\"code\" {...{\n          \"className\": \"text-code-white\"\n        }}>{`.`}</span><span parentName=\"code\" {...{\n          \"className\": \"text-code-white\"\n        }}>{`.`}</span><span parentName=\"code\" {...{\n          \"className\": \"text-code-white\"\n        }}>{`.`}</span><span parentName=\"code\" {...{\n          \"className\": \"\"\n        }}>{`10`}</span><span parentName=\"code\" {...{\n          \"className\": \"text-code-white\"\n        }}>{`)`}</span>{`\n  `}<span parentName=\"code\" {...{\n          \"className\": \"text-code-white\"\n        }}>{`}`}</span>{`\n`}<span parentName=\"code\" {...{\n          \"className\": \"text-code-white\"\n        }}>{`}`}</span>{`\n`}</code></pre>\n    <p>{`Setter functions are optional in computed properties. When no setter function is defined, it's treated as a normal stored, read-only property.`}</p>\n    <h3>{`Summary`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Reference type instance points to the memory address, not the data`}</li>\n      <li parentName=\"ul\">{`Value type instance points to the data but not the memory address`}</li>\n      <li parentName=\"ul\">{`Getter and setter functions are called when computed properties are accessed or modified.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]},"metadata":{},"sourceType":"module"}
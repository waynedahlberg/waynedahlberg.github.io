{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport Post from \"@/components/Post\";\nimport { waynedahlberg } from \"@/authors\";\nimport hero from \"./hero-swiftui-part1-apps.png\";\nimport previewDevice from \"./previewDevice.jpg\";\nimport previewLayout from \"./previewLayout.jpg\";\nexport var __N_SSG = true;\nexport var meta = {\n  title: \"SwiftUI Part 1: Apps\",\n  description: \"The basics of the SwiftUI layout framework.\",\n  date: \"2020-11-17T19:51:00.000Z\",\n  authors: [waynedahlberg],\n  discussion: \"https://github.com/tailwindlabs/tailwindcss/discussions/2511\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  meta: meta\n};\n\nvar MDXLayout = function MDXLayout(props) {\n  return mdx(Post, _extends({\n    meta: meta\n  }, props));\n};\n\nexport default function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"img\", {\n    src: hero,\n    alt: \"Swiftui Basics hero image\"\n  }), mdx(\"h3\", null, \"What is SwiftUI?\"), mdx(\"p\", null, \"SwiftUI is Apple's new framework for describing views, interface controls and layout tools for software development. It provides for controlling user input, managing data flow, and updating of views displayed to the user. I'm personally very excited about this new approach to app development. It's fundamentally different from the imperative approach with UIKit.\"), mdx(\"h3\", null, \"New App Protocol\"), mdx(\"p\", null, \"Using Xcode 12, Apple has defined the new App protocol for describing the structure and behavior apps. This is a big change from the legacy AppDelegate and SceneDelegate structure of the UIKit world. The new app structure is defined like so:\"), mdx(\"pre\", {\n    \"className\": \"language-swift\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Swift\"\n  }), \"@\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"Main\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"struct\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"WeatherApp\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"App\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"{\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"var\"), \" body\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" some \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"Scene\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"{\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"WindowGroup\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"{\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), \"WeatherView\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \")\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"}\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"Settings\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"{\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), \"SettingsView\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \")\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"}\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"}\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"}\"), \"\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@Main\"), \" attribute for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App\"), \" protocol indicates your app's starting point, and provides a default implementation of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main()\"), \" method used to launch the applicaiton. This is the only entry point in your app. Once launched, the structure of your app is managed by one or more instances of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Scene\"), \" protocol. Scenes are part of your app's life cycle managed by the system. There are a few system Scene types that deal specifically with handling documents, app settings, and more. Most of the time you'll be creating your own custom scenes, like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WeatherView\"), \" in the example above.\"), mdx(\"p\", null, \"In the declarative, reactive world - managing application state is paramount and considered a first-class paradigm. Scenes can help manage state at the scene level. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@StateObject\"), \" attributes are used to initialize data models, and make them available to views via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@ObservedObject\"), \" property wrappers or through the environment via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@EnvironmentObject\"), \" to scenes.\"), mdx(\"pre\", {\n    \"className\": \"language-swift\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-Swift\"\n  }), \"@\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"Main\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"struct\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"WeatherApp\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"App\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"{\"), \"\\n    @\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"StateObject\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"private\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"var\"), \" model \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"=\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), \"WeatherModel\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \")\"), \"\\n\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-purple\"\n  }), \"var\"), \" body\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" some \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"Scene\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"{\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"WindowGroup\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"{\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), \"WeatherView\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \")\"), \"\\n                \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \".\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), \"environmentObject\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"(\"), \"model\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \")\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-gray-400 italic\"\n  }), \"// passed via environment\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"}\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"\"\n  }), \"Settings\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"{\"), \"\\n            \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-blue\"\n  }), \"SettingsView\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"(\"), \"model\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \":\"), \" model\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \")\"), \" \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-gray-400 italic\"\n  }), \"// passed via observed object\"), \"\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"}\"), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"}\"), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"text-code-white\"\n  }), \"}\"), \"\\n\")), mdx(\"p\", null, \"With this new structure you're able to share common code between multiple platforms their own views and controls that react to their own context and presentation.\"), mdx(\"h3\", null, \"Preview Canvas in Xcode 12\"), mdx(\"p\", null, \"Xcode 12 features a live IDE where you can generate dynamic, interactive previews of custom views.\"), mdx(\"img\", {\n    src: previewDevice,\n    alt: \"Preview in device frame\"\n  }), mdx(\"p\", null, \"You're able to preview in all devices on the canvas, as well as describe custom layout sizes.\"), mdx(\"img\", {\n    src: previewLayout,\n    alt: \"Preview in any size frame\"\n  }), mdx(\"p\", null, \"need to add more here...\"));\n}\n;\nMDXContent.isMDXComponent = true;","map":null,"metadata":{},"sourceType":"module"}
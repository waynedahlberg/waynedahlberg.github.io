{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _jsxFileName = \"/Users/waynedahlberg/Blog/waynedahlberg.github.io/src/pages/test-post-ipad/index.mdx\",\n    _this = this;\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport Post from \"@/components/Post\";\nimport { waynedahlberg } from \"@/authors\";\nimport image from \"./tailwind.jpg\";\nexport var __N_SSG = true;\nexport var meta = {\n  title: \"Test post from my iPad\",\n  description: \"This post was created in Working Copy.\",\n  date: \"2020-11-07T14:24:00.000Z\",\n  authors: [waynedahlberg],\n  image: image,\n  discussion: \"https://github.com/tailwindlabs/tailwindcss/discussions/2511\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", _extends({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 10\n      }\n    }));\n  };\n};\n\nvar layoutProps = {\n  meta: meta\n};\n\nvar MDXLayout = function MDXLayout(props) {\n  return mdx(Post, _extends({\n    meta: meta\n  }, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 30\n    }\n  }));\n};\n\n_c = MDXLayout;\nexport default function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 10\n    }\n  }), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, \"I've been on the hunt for a solid blogging solution. Static site generators like Jekyll and Gatsby were very appealing to me, but the configuration and setup was bumpy. I found myself learning more about react routes and obscure javascript that I needed for a simple blog. \"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, \"I also wanted by blog to look and feel nice. A clean interface that let the content shine.\"), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, \"In order to look clean, I opted to use the Tailwind CSS framework. I've been really impresssed with what that team has been releasing recently. One of the articles on their site shows how to integrate Tailwind with the Next.js framework. After going through some basic and intermediate examples, I felt Next.js was what I wanted to use. Next.js is created by Vercel, a CI static content management service. It took some finagling, but I was able to connect my blog repo (Next.js) to Vercel, and attach a CI script to run every time Git triggered an update. \"), mdx(\"img\", {\n    src: image,\n    alt: \"Early days of Verses interface.\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }), mdx(\"blockquote\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, mdx(\"p\", {\n    parentName: \"blockquote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, \"I want to open my phone and start reading where I left off the day before.\")), mdx(\"div\", {\n    className: \"my-8 relative pb-9/16\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, mdx(\"iframe\", {\n    className: \"absolute inset-0 h-full w-full\",\n    src: \"https://www.youtube.com/embed/lMW6dqHUdSQ\",\n    frameBorder: \"0\",\n    allow: \"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\",\n    allowFullScreen: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 3\n    }\n  })));\n}\n_c2 = MDXContent;\n;\nMDXContent.isMDXComponent = true;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MDXLayout\");\n$RefreshReg$(_c2, \"MDXContent\");","map":{"version":3,"sources":["/Users/waynedahlberg/Blog/waynedahlberg.github.io/src/pages/test-post-ipad/index.mdx"],"names":["React","mdx","Post","waynedahlberg","image","meta","title","description","date","authors","discussion","makeShortcode","name","MDXDefaultShortcode","props","console","warn","layoutProps","MDXLayout","MDXContent","components","isMDXComponent"],"mappings":";;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AAEA;;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AAEA,SAASC,aAAT,QAA8B,WAA9B;AACA,OAAOC,KAAP,MAAkB,gBAAlB;;AAEA,OAAO,IAAMC,IAAI,GAAG;AAClBC,EAAAA,KAAK,0BADa;AAElBC,EAAAA,WAAW,0CAFO;AAGlBC,EAAAA,IAAI,EAAE,0BAHY;AAIlBC,EAAAA,OAAO,EAAE,CAACN,aAAD,CAJS;AAKlBC,EAAAA,KAAK,EAALA,KALkB;AAMlBM,EAAAA,UAAU,EAAE;AANM,CAAb;;AAQP,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,IAAI;AAAA,SAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChEC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,WAAO,wBAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAHyB;AAAA,CAA1B;;AAKA,IAAMG,WAAW,GAAG;AAClBZ,EAAAA,IAAI,EAAJA;AADkB,CAApB;;AAGA,IAAMa,SAAS,GAAG,SAAZA,SAAY,CAACJ,KAAD;AAAA,SAAW,IAAC,IAAD;AAAM,IAAA,IAAI,EAAET;AAAZ,KAAsBS,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAX;AAAA,CAAlB;;KAAMI,S;AACN,eAAe,SAASC,UAAT,OAGZ;AAAA,MAFDC,UAEC,QAFDA,UAEC;AAAA,MADEN,KACF;;AACD,SAAO,IAAC,SAAD,eAAeG,WAAf,EAAgCH,KAAhC;AAAuC,IAAA,UAAU,EAAEM,UAAnD;AAA+D,IAAA,OAAO,EAAC,WAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yRALK,EAML;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kGANK,EAOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qjBAPK,EAQL;AAAK,IAAA,GAAG,EAAEhB,KAAV;AAAiB,IAAA,GAAG,EAAC,iCAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARK,EASL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,UAAU,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kFADF,CATK,EAYL;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACF;AAAQ,IAAA,SAAS,EAAC,gCAAlB;AAAmD,IAAA,GAAG,EAAC,2CAAvD;AAAmG,IAAA,WAAW,EAAC,GAA/G;AAAmH,IAAA,KAAK,EAAC,yEAAzH;AAAmM,IAAA,eAAe,MAAlN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADE,CAZK,CAAP;AAiBD;MArBuBe,U;AAuBxB;AACAA,UAAU,CAACE,cAAX,GAA4B,IAA5B","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport Post from \"@/components/Post\"\n\nimport { waynedahlberg } from \"@/authors\";\nimport image from \"./tailwind.jpg\";\nexport { getStaticProps } from \"@/getStaticProps\";\nexport const meta = {\n  title: `Test post from my iPad`,\n  description: `This post was created in Working Copy.`,\n  date: \"2020-11-07T14:24:00.000Z\",\n  authors: [waynedahlberg],\n  image,\n  discussion: \"https://github.com/tailwindlabs/tailwindcss/discussions/2511\"\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  meta\n};\nconst MDXLayout = (props) => <Post meta={meta} {...props} />\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <p>{`I've been on the hunt for a solid blogging solution. Static site generators like Jekyll and Gatsby were very appealing to me, but the configuration and setup was bumpy. I found myself learning more about react routes and obscure javascript that I needed for a simple blog. `}</p>\n    <p>{`I also wanted by blog to look and feel nice. A clean interface that let the content shine.`}</p>\n    <p>{`In order to look clean, I opted to use the Tailwind CSS framework. I've been really impresssed with what that team has been releasing recently. One of the articles on their site shows how to integrate Tailwind with the Next.js framework. After going through some basic and intermediate examples, I felt Next.js was what I wanted to use. Next.js is created by Vercel, a CI static content management service. It took some finagling, but I was able to connect my blog repo (Next.js) to Vercel, and attach a CI script to run every time Git triggered an update. `}</p>\n    <img src={image} alt=\"Early days of Verses interface.\" />\n    <blockquote>\n      <p parentName=\"blockquote\">{`I want to open my phone and start reading where I left off the day before.`}</p>\n    </blockquote>\n    <div className=\"my-8 relative pb-9/16\">\n  <iframe className=\"absolute inset-0 h-full w-full\" src=\"https://www.youtube.com/embed/lMW6dqHUdSQ\" frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n    </div>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport Post from \"@/components/Post\";\nimport { waynedahlberg } from \"@/authors\";\nimport image1 from \"./ia-writer-working-copy.jpg\";\nimport image2 from \"./nextjs-tailwind-vercel.jpg\";\nexport var __N_SSG = true;\nexport var meta = {\n  title: \"Test post from my iPad\",\n  description: \"This post was created in Working Copy.\",\n  date: \"2020-11-07T14:24:00.000Z\",\n  authors: [waynedahlberg],\n  image1,\n  image2,\n  discussion: \"https://github.com/tailwindlabs/tailwindcss/discussions/2511\"\n};\n\nvar makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\n\nvar layoutProps = {\n  meta\n};\n\nvar MDXLayout = props => mdx(Post, _extends({\n  meta: meta\n}, props));\n\nexport default function MDXContent(_ref) {\n  var {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I've been on the hunt for a solid blogging solution. Static site generators like Jekyll and Gatsby were very appealing to me, but the configuration and setup was bumpy. I found myself learning more about react routes and obscure javascript that I needed for a simple blog.\"), mdx(\"p\", null, \"I also wanted by blog to look and feel nice. A clean interface that let the content shine.\"), mdx(\"p\", null, \"In order to look clean, I opted to use the Tailwind CSS framework. I've been really impresssed with what that team has been releasing recently. One of the articles on their site shows how to integrate Tailwind with the Next.js framework. After going through some basic and intermediate examples, I felt Next.js was what I wanted to use. Next.js is created by Vercel, a CI static content management service. It took some finagling, but I was able to connect my blog repo (Next.js) to Vercel, and attach a CI script to run every time Git triggered an update.\"), mdx(\"img\", {\n    src: image2,\n    alt: \"Early days of Verses interface.\"\n  }), mdx(\"p\", null, \"Everything is up and running and I'm able to post from my laptop. But I wondered if I could do the same with iOS / iPadOS?. The answer is a resounding YES, with a few caveats. First, I compose the posts in a great app called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://google.com\"\n  }), \"IA Writer\"), \". From there, I import the markdown output into a Git manager for iPad called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://google.com\"\n  }), \"Working Copy\"), \". I duplicate a previous post, modify the meta data for title, date and a few other things.\"), mdx(\"img\", {\n    src: image1,\n    alt: \"Early days of Verses interface.\"\n  }), mdx(\"p\", null, \"The great thing about Next.js is that it allows for embedding fully modern, extensible components into your blog posts, all while retaiing the ease and simplicity of importing markdown for final post parsing.\"));\n}\n;\nMDXContent.isMDXComponent = true;","map":null,"metadata":{},"sourceType":"module"}
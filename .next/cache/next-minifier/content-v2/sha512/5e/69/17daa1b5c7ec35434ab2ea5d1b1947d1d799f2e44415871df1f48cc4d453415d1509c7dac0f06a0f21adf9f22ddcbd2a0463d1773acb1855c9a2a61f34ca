{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{CZVI:function(e,t,a){\"use strict\";a.d(t,\"a\",(function(){return y}));var c=a(\"wx14\"),n=a(\"Ff2n\"),s=a(\"q1tI\"),r=a.n(s),l=a(\"8Kt/\"),o=a.n(l),i=r.a.createElement;function p(e){var{children:t}=e;return i(\"h1\",{className:\"text-5xl leading-14 font-bold text-gray-900 tracking-tight sm:text-4xl sm:leading-10 md:text-5xl md:leading-14\"},t)}var d=a(\"SYun\"),b=a.n(d),m=a(\"YFqc\"),u=a.n(m),j=a(\"nOHt\"),O=a(\"7ljp\"),N=r.a.createElement,h={pre:e=>{var{className:t}=e,a=Object(n.a)(e,[\"className\"]);return N(\"pre\",Object(c.a)({className:\"\".concat(t,\" rounded-md bg-gray-800 py-3 px-4 overflow-x-auto\")},a))},\"pre.code\":e=>{var{className:t}=e,a=Object(n.a)(e,[\"className\"]);return N(\"code\",Object(c.a)({className:\"\".concat(t,\" text-gray-200\")},a))}},x=b()(\"{dddd}, {MMMM} {DD}, {YYYY}\");function y(e){var{meta:t,children:a,posts:c}=e,n=Object(j.useRouter)(),s=c.findIndex(e=>e.link===n.pathname),r=c[s+1],l=c[s-1];return N(\"article\",{className:\"xl:divide-y xl:divide-gray-200\"},N(o.a,null,N(\"title\",null,t.title,\" \\u2013 Tailwind CSS\"),N(\"meta\",{name:\"twitter:card\",content:\"summary_large_image\"}),N(\"meta\",{name:\"twitter:site\",content:\"@waynedahlberg\"}),N(\"meta\",{name:\"twitter:creator\",content:\"@waynedahlberg\"}),N(\"meta\",{name:\"twitter:title\",content:\"\".concat(t.title,\" \\u2013 Wayne Dahlberg\")}),N(\"meta\",{name:\"twitter:description\",content:t.description}),N(\"meta\",{name:\"twitter:image\",content:\"https://blog.tailwindcss.com\".concat(t.image)}),N(\"meta\",{property:\"og:url\",content:\"https://blog.tailwindcss.com\".concat(n.pathname)}),N(\"meta\",{property:\"og:type\",content:\"article\"}),N(\"meta\",{property:\"og:title\",content:\"\".concat(t.title,\" \\u2013 Wayne Dahlberg\")}),N(\"meta\",{property:\"og:description\",content:t.description}),N(\"meta\",{property:\"og:image\",content:\"https://blog.tailwindcss.com\".concat(t.image)}),N(\"meta\",{name:\"description\",content:t.description})),N(\"header\",{className:\"pt-6 xl:pb-10\"},N(\"div\",{className:\"space-y-1 text-center\"},N(\"dl\",{className:\"space-y-10\"},N(\"div\",null,N(\"dt\",{className:\"sr-only\"},\"Published on\"),N(\"dd\",{className:\"text-sm leading-6 font-medium text-gray-500\"},N(\"time\",{dateTime:t.date},x.render(new Date(t.date)))))),N(\"div\",null,N(p,null,t.title)))),N(\"div\",{className:\"divide-y xl:divide-y-0 divide-gray-200 xl:grid xl:grid-cols-4 xl:col-gap-6 pb-16 xl:pb-20\",style:{gridTemplateRows:\"auto 1fr\"}},N(\"dl\",{className:\"pt-6 pb-10 xl:pt-11 xl:border-b xl:border-gray-200\"},N(\"dt\",{className:\"sr-only\"},\"Authors\"),N(\"dd\",null,N(\"ul\",{className:\"flex justify-center xl:block space-x-8 sm:space-x-12 xl:space-x-0 xl:space-y-8\"},t.authors.map(e=>N(\"li\",{key:e.twitter,className:\"flex items-center space-x-2\"},N(\"img\",{src:e.avatar,alt:\"\",className:\"w-10 h-10 rounded-full\"}),N(\"dl\",{className:\"text-sm font-medium leading-5 whitespace-no-wrap\"},N(\"dt\",{className:\"sr-only\"},\"Name\"),N(\"dd\",{className:\"text-gray-900\"},e.name),N(\"dt\",{className:\"sr-only\"},\"Twitter\"),N(\"dd\",null,N(\"a\",{href:\"https://twitter.com/\".concat(e.twitter),className:\"text-teal-500 hover:text-teal-700\"},e.twitter)))))))),N(\"div\",{className:\"divide-y divide-gray-200 xl:pb-0 xl:col-span-3 xl:row-span-2\"},N(\"div\",{className:\"prose max-w-none pt-10 pb-8\"},N(O.a,{components:h},a))),N(\"footer\",{className:\"text-sm font-medium leading-5 divide-y divide-gray-200 xl:col-start-1 xl:row-start-2\"},(l||r)&&N(\"div\",{className:\"space-y-8 py-8\"},l&&N(\"div\",null,N(\"h2\",{className:\"text-xs tracking-wide uppercase text-gray-500\"},\"Next Article\"),N(\"div\",{className:\"text-teal-500 hover:text-teal-600\"},N(u.a,{href:l.link},N(\"a\",null,l.title)))),r&&N(\"div\",null,N(\"h2\",{className:\"text-xs tracking-wide uppercase text-gray-500\"},\"Previous Article\"),N(\"div\",{className:\"text-teal-500 hover:text-teal-700\"},N(u.a,{href:r.link},N(\"a\",null,r.title))))),N(\"div\",{className:\"pt-8\"},N(u.a,{href:\"/\"},N(\"a\",{className:\"text-teal-500 hover:text-teal-700\"},\"\\u2190 All Posts\"))))))}},YCLL:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push([\"/110720-swift-types\",function(){return a(\"bzT+\")}])},YICZ:function(e,t,a){\"use strict\";t.a=\"/_next/static/media/hero-types.0fd3eb31b1dfa7b2898f6ddb00ec8594.png\"},\"bzT+\":function(e,t,a){\"use strict\";a.r(t),a.d(t,\"__N_SSG\",(function(){return d})),a.d(t,\"meta\",(function(){return b})),a.d(t,\"default\",(function(){return j}));var c=a(\"Ff2n\"),n=a(\"wx14\"),s=a(\"q1tI\"),r=a.n(s),l=a(\"7ljp\"),o=a(\"CZVI\"),i=a(\"iBhN\"),p=a(\"YICZ\"),d=(r.a.createElement,!0),b={title:\"Swift Types\",description:\"Back to basics with Swift types\",date:\"2020-11-07T12:00:00.000Z\",authors:[i.a],discussion:\"https://github.com/tailwindlabs/tailwindcss/discussions/2511\"},m={meta:b},u=e=>Object(l.b)(o.a,Object(n.a)({meta:b},e));function j(e){var{components:t}=e,a=Object(c.a)(e,[\"components\"]);return Object(l.b)(u,Object(n.a)({},m,a,{components:t,mdxType:\"MDXLayout\"}),Object(l.b)(\"img\",{src:p.a,alt:\"Swift Generics Hero Image\"}),Object(l.b)(\"p\",null,\"In the Swift programming language, nearly everything is based on a named type or compound type. Named types can be assigned names when created. These include \",Object(l.b)(\"em\",{parentName:\"p\"},\"classes\"),\", \",Object(l.b)(\"em\",{parentName:\"p\"},\"structures\"),\", \",Object(l.b)(\"em\",{parentName:\"p\"},\"enumerations\"),\", and \",Object(l.b)(\"em\",{parentName:\"p\"},\"protocols\"),\". Instances of user-defined named types carry the name of the given type. For example, a class named \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"MyClass\"),\" will have the type \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"MyClass\"),\". Swift also includes many standard named types for arrays, dictionaries and optional values.\"),Object(l.b)(\"div\",{class:\"rounded-md bg-blue-50 p-4\"},Object(l.b)(\"div\",{class:\"flex\"},Object(l.b)(\"div\",{class:\"flex-shrink-0\"},Object(l.b)(\"svg\",{class:\"h-5 w-5 text-blue-400\",xmlns:\"http://www.w3.org/2000/svg\",viewBox:\"0 0 20 20\",fill:\"currentColor\"},Object(l.b)(\"path\",{fillRule:\"evenodd\",d:\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\",clipRule:\"evenodd\"}))),Object(l.b)(\"div\",{class:\"ml-3 flex-1 md:flex md:justify-between\"},Object(l.b)(\"p\",{class:\"text-sm leading-5 text-blue-700\"},\"This is a another post in a series intended as a personal growth exercise. As I learn and digest new things, I want to write about them to solidify my understanding.\"),Object(l.b)(\"p\",{class:\"mt-3 text-sm leading-5 md:mt-0 md:ml-6\"},Object(l.b)(\"a\",{href:\"https://fs.blog/2015/01/richard-feynman-knowing-something/\",class:\"whitespace-no-wrap font-medium text-blue-700 hover:text-blue-600 transition ease-in-out duration-150\"},\"Feynman \\u2192\"))))),Object(l.b)(\"p\",null,\"Compound types are types without a specific name. A compound type may contain other named and compound types. For example, the compound tuple type \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"(Int, (Int, Int))\"),\" contains two inner types. The first is the named \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"Int\"),\" type, the second is a compount type of \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"(Int, Int)\"),\".\"),Object(l.b)(\"p\",null,\"Properties are either stored, or computed. A stored property has a fixed value. On the other hand, a computed property is calculated every time it is are accessed. There are also simple observers on properties that listen to changes via callbacks. These observers are \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"willSet\"),\" and \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"didSet\"),\".\"),Object(l.b)(\"p\",null,\"This was very difficult for me to wrap my head around in my early Swift learning days.\"),Object(l.b)(\"h3\",null,\"Value types vs Reference types\"),Object(l.b)(\"p\",null,\"When a piece of data is saved to disk, it is saved in a container. Imagine each container having a label on the outside. Value types refer to the \",Object(l.b)(\"em\",{parentName:\"p\"},\"actual data\"),\" inside the container. Reference types refer to the label, or \",Object(l.b)(\"em\",{parentName:\"p\"},\"memory address\"),\" on the container.\"),Object(l.b)(\"pre\",{className:\"language-swift\"},Object(l.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-Swift\"}),Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-purple\"}),\"class\"),\" \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"\"}),\"SimpleClass\"),\" \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-white\"}),\"{\"),\"\\n    \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-purple\"}),\"var\"),\" name \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"\"}),\"=\"),\" \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-green\"}),'\"\"'),\"\\n\",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-white\"}),\"}\"),\"\\n\\n\",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-purple\"}),\"struct\"),\" \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"\"}),\"SimpleStruct\"),\" \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-white\"}),\"{\"),\"\\n    \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-purple\"}),\"var\"),\" name \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"\"}),\"=\"),\" \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-green\"}),'\"\"'),\"\\n\",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-white\"}),\"}\"),\"\\n\\n\",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-gray-400 italic\"}),\"// Memory address is constant but data is variable\"),\"\\n\",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-purple\"}),\"let\"),\" simpleClass \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"\"}),\"=\"),\" \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-blue\"}),\"SimpleClass\"),Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-white\"}),\"(\"),Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-white\"}),\")\"),\"\\nsimpleClass\",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-white\"}),\".\"),\"name \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"\"}),\"=\"),\" \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-green\"}),'\"wayne\"'),\" \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-gray-400 italic\"}),\"// OK\"),\"\\n\\n\",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-gray-400 italic\"}),\"// Data is constant but address is variable\"),\"\\n\",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-purple\"}),\"let\"),\" simpleStruct \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"\"}),\"=\"),\" \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-blue\"}),\"SimpleStruct\"),Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-white\"}),\"(\"),Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-white\"}),\")\"),\"\\nsimpleStruct\",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-white\"}),\".\"),\"name \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"\"}),\"=\"),\" \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-green\"}),'\"wayne\"'),\" \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-gray-400 italic\"}),\"// Compiler error\"),\"\\n\")),Object(l.b)(\"p\",null,\"So here we have a constant (let) \",Object(l.b)(\"em\",{parentName:\"p\"},\"class\"),\" instance with a constant memory address, but its data is variable and can change at any time. This was a huge eye opener for me to learn early on.\"),Object(l.b)(\"p\",null,\"However, a constant (let) \",Object(l.b)(\"em\",{parentName:\"p\"},\"structure\"),\" instance has constant data, but a variable memory address. It will throw a compiler error every time the constant structure is changed.\"),Object(l.b)(\"p\",null,\"Convention tells us to use \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"struct\"),\" primarily, but should opt for \",Object(l.b)(\"inlineCode\",{parentName:\"p\"},\"class\"),\" when our code is designed for instances, as well as interfacing with legacy Objective-C code.\"),Object(l.b)(\"h3\",null,\"Computed Properties \\u2014 Getters & Setters\"),Object(l.b)(\"p\",null,\"Computed properties have special functions for getting and setting of property values. It's value is determined by the getter function every time it's accessed, instead of some stored property with a specific value.\"),Object(l.b)(\"p\",null,\"Getter functions can retrieve data from storage and setter functions can assign the data to storage directly.\"),Object(l.b)(\"pre\",{className:\"language-swift\"},Object(l.b)(\"code\",Object(n.a)({parentName:\"pre\"},{className:\"language-Swift\"}),Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-purple\"}),\"var\"),\" randomInteger\",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-white\"}),\":\"),\" \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"\"}),\"Int\"),\" \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-white\"}),\"{\"),\"\\n  \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-purple\"}),\"get\"),\" \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-white\"}),\"{\"),\"\\n    \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-purple\"}),\"return\"),\" \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"\"}),\"100\"),\" \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"\"}),\"*\"),\" \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"\"}),\"Int\"),Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-white\"}),\".\"),Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-blue\"}),\"random\"),Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-white\"}),\"(\"),Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-purple\"}),\"in\"),Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-white\"}),\":\"),\" \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"\"}),\"0\"),Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-white\"}),\".\"),Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-white\"}),\".\"),Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-white\"}),\".\"),Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"\"}),\"10\"),Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-white\"}),\")\"),\"\\n  \",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-white\"}),\"}\"),\"\\n\",Object(l.b)(\"span\",Object(n.a)({parentName:\"code\"},{className:\"text-code-white\"}),\"}\"),\"\\n\")),Object(l.b)(\"p\",null,\"Setter functions are optional in computed properties. When no setter function is defined, it's treated as a normal stored, read-only property.\"),Object(l.b)(\"h3\",null,\"Summary\"),Object(l.b)(\"ul\",null,Object(l.b)(\"li\",{parentName:\"ul\"},\"Reference type instance points to the memory address, not the data\"),Object(l.b)(\"li\",{parentName:\"ul\"},\"Value type instance points to the data but not the memory address\"),Object(l.b)(\"li\",{parentName:\"ul\"},\"Getter and setter functions are called when computed properties are accessed or modified.\")),Object(l.b)(\"h3\",null,\"Resources:\"),Object(l.b)(\"ul\",null,Object(l.b)(\"li\",{parentName:\"ul\"},Object(l.b)(\"a\",Object(n.a)({parentName:\"li\"},{href:\"https://fluffy.es/reference-vs-value-type/\"}),\"Understanding Reference and Value types\")),Object(l.b)(\"li\",{parentName:\"ul\"},Object(l.b)(\"a\",Object(n.a)({parentName:\"li\"},{href:\"https://developer.apple.com/documentation/swift/choosing_between_structures_and_classes\"}),\"Choosing Between Structures and Classes\"))))}j.isMDXComponent=!0}},[[\"YCLL\",0,2,1,3]]]);","extractedComments":[]}
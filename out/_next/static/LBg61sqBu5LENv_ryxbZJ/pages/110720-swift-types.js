(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{CZVI:function(e,t,a){"use strict";a.d(t,"a",(function(){return y}));var c=a("wx14"),n=a("Ff2n"),s=a("q1tI"),r=a.n(s),l=a("8Kt/"),o=a.n(l),i=r.a.createElement;function p(e){var t=e.children;return i("h1",{className:"text-5xl leading-14 font-bold text-gray-900 tracking-tight sm:text-4xl sm:leading-10 md:text-5xl md:leading-14"},t)}var d=a("SYun"),b=a.n(d),m=a("YFqc"),u=a.n(m),N=a("nOHt"),j=a("7ljp"),O=r.a.createElement,h={pre:function(e){var t=e.className,a=Object(n.a)(e,["className"]);return O("pre",Object(c.a)({className:"".concat(t," rounded-md bg-gray-800 py-3 px-4 overflow-x-auto")},a))},"pre.code":function(e){var t=e.className,a=Object(n.a)(e,["className"]);return O("code",Object(c.a)({className:"".concat(t," text-gray-200")},a))}},x=b()("{dddd}, {MMMM} {DD}, {YYYY}");function y(e){var t=e.meta,a=e.children,c=e.posts,n=Object(N.useRouter)(),s=c.findIndex((function(e){return e.link===n.pathname})),r=c[s+1],l=c[s-1];return O("article",{className:"xl:divide-y xl:divide-gray-200"},O(o.a,null,O("title",null,t.title," \u2013 Tailwind CSS"),O("meta",{name:"twitter:card",content:"summary_large_image"}),O("meta",{name:"twitter:site",content:"@waynedahlberg"}),O("meta",{name:"twitter:creator",content:"@waynedahlberg"}),O("meta",{name:"twitter:title",content:"".concat(t.title," \u2013 Wayne Dahlberg")}),O("meta",{name:"twitter:description",content:t.description}),O("meta",{name:"twitter:image",content:"https://blog.tailwindcss.com".concat(t.image)}),O("meta",{property:"og:url",content:"https://blog.tailwindcss.com".concat(n.pathname)}),O("meta",{property:"og:type",content:"article"}),O("meta",{property:"og:title",content:"".concat(t.title," \u2013 Wayne Dahlberg")}),O("meta",{property:"og:description",content:t.description}),O("meta",{property:"og:image",content:"https://blog.tailwindcss.com".concat(t.image)}),O("meta",{name:"description",content:t.description})),O("header",{className:"pt-6 xl:pb-10"},O("div",{className:"space-y-1 text-center"},O("dl",{className:"space-y-10"},O("div",null,O("dt",{className:"sr-only"},"Published on"),O("dd",{className:"text-sm leading-6 font-medium text-gray-500"},O("time",{dateTime:t.date},x.render(new Date(t.date)))))),O("div",null,O(p,null,t.title)))),O("div",{className:"divide-y xl:divide-y-0 divide-gray-200 xl:grid xl:grid-cols-4 xl:col-gap-6 pb-16 xl:pb-20",style:{gridTemplateRows:"auto 1fr"}},O("dl",{className:"pt-6 pb-10 xl:pt-11 xl:border-b xl:border-gray-200"},O("dt",{className:"sr-only"},"Authors"),O("dd",null,O("ul",{className:"flex justify-center xl:block space-x-8 sm:space-x-12 xl:space-x-0 xl:space-y-8"},t.authors.map((function(e){return O("li",{key:e.twitter,className:"flex items-center space-x-2"},O("img",{src:e.avatar,alt:"",className:"w-10 h-10 rounded-full"}),O("dl",{className:"text-sm font-medium leading-5 whitespace-no-wrap"},O("dt",{className:"sr-only"},"Name"),O("dd",{className:"text-gray-900"},e.name),O("dt",{className:"sr-only"},"Twitter"),O("dd",null,O("a",{href:"https://twitter.com/".concat(e.twitter),className:"text-teal-500 hover:text-teal-700"},e.twitter))))}))))),O("div",{className:"divide-y divide-gray-200 xl:pb-0 xl:col-span-3 xl:row-span-2"},O("div",{className:"prose max-w-none pt-10 pb-8"},O(j.a,{components:h},a))),O("footer",{className:"text-sm font-medium leading-5 divide-y divide-gray-200 xl:col-start-1 xl:row-start-2"},(l||r)&&O("div",{className:"space-y-8 py-8"},l&&O("div",null,O("h2",{className:"text-xs tracking-wide uppercase text-gray-500"},"Next Article"),O("div",{className:"text-teal-500 hover:text-teal-600"},O(u.a,{href:l.link},O("a",null,l.title)))),r&&O("div",null,O("h2",{className:"text-xs tracking-wide uppercase text-gray-500"},"Previous Article"),O("div",{className:"text-teal-500 hover:text-teal-700"},O(u.a,{href:r.link},O("a",null,r.title))))),O("div",{className:"pt-8"},O(u.a,{href:"/"},O("a",{className:"text-teal-500 hover:text-teal-700"},"\u2190 All Posts"))))))}},YCLL:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/110720-swift-types",function(){return a("bzT+")}])},"bzT+":function(e,t,a){"use strict";a.r(t),a.d(t,"__N_SSG",(function(){return p})),a.d(t,"meta",(function(){return d})),a.d(t,"default",(function(){return u}));var c=a("Ff2n"),n=a("wx14"),s=a("q1tI"),r=a.n(s),l=a("7ljp"),o=a("CZVI"),i=a("iBhN"),p=(r.a.createElement,!0),d={title:"Swift Types",description:"Back to basics with Swift types",date:"2020-11-07T12:00:00.000Z",authors:[i.a],discussion:"https://github.com/tailwindlabs/tailwindcss/discussions/2511"},b={meta:d},m=function(e){return Object(l.b)(o.a,Object(n.a)({meta:d},e))};function u(e){var t=e.components,a=Object(c.a)(e,["components"]);return Object(l.b)(m,Object(n.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("div",{class:"rounded-md bg-blue-50 p-4"},Object(l.b)("div",{class:"flex"},Object(l.b)("div",{class:"flex-shrink-0"},Object(l.b)("svg",{class:"h-5 w-5 text-blue-400",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20",fill:"currentColor"},Object(l.b)("path",{"fill-rule":"evenodd",d:"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z","clip-rule":"evenodd"}))),Object(l.b)("div",{class:"ml-3 flex-1 md:flex md:justify-between"},Object(l.b)("p",{class:"text-sm leading-5 text-blue-700"},"his is the first of several articles intended as personal growth exercises, rather than sharing with the community. As I learn new things, I want to write about them to further cement my understanding and hold myself accountable")))),Object(l.b)("p",null,"In the Swift programming language, nearly everything is based on a ",Object(l.b)("em",{parentName:"p"},"named type")," or a ",Object(l.b)("em",{parentName:"p"},"compound type"),"."),Object(l.b)("p",null,"Named types can be assigned names when created. These include ",Object(l.b)("strong",{parentName:"p"},"classes"),", ",Object(l.b)("strong",{parentName:"p"},"structures"),", ",Object(l.b)("strong",{parentName:"p"},"enumerations"),", and ",Object(l.b)("strong",{parentName:"p"},"protocols"),". Instances of user-defined named types carry the name of the given type. For example, a class named ",Object(l.b)("inlineCode",{parentName:"p"},"MyClass")," will have the type ",Object(l.b)("inlineCode",{parentName:"p"},"MyClass"),". Swift also includes many standard named types for arrays, dictionaries and optional values."),Object(l.b)("p",null,"Compound types are types without a specific name. A compound type may contain other named and compound types. For example, the compound tuple type ",Object(l.b)("inlineCode",{parentName:"p"},"(Int, (Int, Int))")," contains two inner types. The first is the named ",Object(l.b)("inlineCode",{parentName:"p"},"Int")," type, the second is a compount type of ",Object(l.b)("inlineCode",{parentName:"p"},"(Int, Int)"),"."),Object(l.b)("p",null,"Properties are either stored, or computed. A stored property has a fixed value. On the other hand, a computed property is calculated every time it is are accessed. There are also simple observers on properties that listen to changes via callbacks. These observers are ",Object(l.b)("inlineCode",{parentName:"p"},"willSet")," and ",Object(l.b)("inlineCode",{parentName:"p"},"didSet"),"."),Object(l.b)("p",null,"This was very difficult for me to wrap my head around in my early Swift learning days."),Object(l.b)("h3",null,"Value types vs Reference types"),Object(l.b)("p",null,"When a piece of data is saved to disk, it is saved in a container. Imagine each container having a label on the outside. Value types refer to the ",Object(l.b)("em",{parentName:"p"},"actual data")," inside the container. Reference types refer to the label, or ",Object(l.b)("em",{parentName:"p"},"memory address")," on the container."),Object(l.b)("pre",{className:"language-swift"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-Swift"}),Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-purple"}),"class")," ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:""}),"SimpleClass")," ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-white"}),"{"),"\n    ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-purple"}),"var")," name ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:""}),"=")," ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-green"}),'""'),"\n",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-white"}),"}"),"\n\n",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-purple"}),"struct")," ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:""}),"SimpleStruct")," ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-white"}),"{"),"\n    ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-purple"}),"var")," name ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:""}),"=")," ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-green"}),'""'),"\n",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-white"}),"}"),"\n\n",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-gray-400 italic"}),"// Memory address is constant but data is variable"),"\n",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-purple"}),"let")," simpleClass ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:""}),"=")," ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-blue"}),"SimpleClass"),Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-white"}),"("),Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-white"}),")"),"\nsimpleClass",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-white"}),"."),"name ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:""}),"=")," ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-green"}),'"wayne"')," ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-gray-400 italic"}),"// OK"),"\n\n",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-gray-400 italic"}),"// Data is constant but address is variable"),"\n",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-purple"}),"let")," simpleStruct ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:""}),"=")," ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-blue"}),"SimpleStruct"),Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-white"}),"("),Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-white"}),")"),"\nsimpleStruct",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-white"}),"."),"name ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:""}),"=")," ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-green"}),'"wayne"')," ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-gray-400 italic"}),"// Compiler error"),"\n")),Object(l.b)("p",null,"So here we have a constant (let) ",Object(l.b)("em",{parentName:"p"},"class")," instance with a constant memory address, but its data is variable and can change at any time. This was a huge eye opener for me to learn early on."),Object(l.b)("p",null,"However, a constant (let) ",Object(l.b)("em",{parentName:"p"},"structure")," instance has constant data, but a variable memory address. It will throw a compiler error every time the constant structure is changed."),Object(l.b)("p",null,"Convention tells us to use ",Object(l.b)("inlineCode",{parentName:"p"},"struct")," primarily, but should opt for ",Object(l.b)("inlineCode",{parentName:"p"},"class")," when our code is designed for instances, as well as interfacing with legacy Objective-C code."),Object(l.b)("h3",null,"Computed Properties \u2014 Getters & Setters"),Object(l.b)("p",null,"Computed properties have special functions for getting and setting of property values. It's value is determined by the getter function every time it's accessed, instead of some stored property with a specific value."),Object(l.b)("p",null,"Getter functions can retrieve data from storage and setter functions can assign the data to storage directly."),Object(l.b)("pre",{className:"language-swift"},Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-Swift"}),Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-purple"}),"var")," randomInteger",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-white"}),":")," ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:""}),"Int")," ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-white"}),"{"),"\n  ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-purple"}),"get")," ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-white"}),"{"),"\n    ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-purple"}),"return")," ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:""}),"100")," ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:""}),"*")," ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:""}),"Int"),Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-white"}),"."),Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-blue"}),"random"),Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-white"}),"("),Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-purple"}),"in"),Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-white"}),":")," ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:""}),"0"),Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-white"}),"."),Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-white"}),"."),Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-white"}),"."),Object(l.b)("span",Object(n.a)({parentName:"code"},{className:""}),"10"),Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-white"}),")"),"\n  ",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-white"}),"}"),"\n",Object(l.b)("span",Object(n.a)({parentName:"code"},{className:"text-code-white"}),"}"),"\n")),Object(l.b)("p",null,"Setter functions are optional in computed properties. When no setter function is defined, it's treated as a normal stored, read-only property."),Object(l.b)("h3",null,"Summary"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Reference type instance points to the memory address, not the data"),Object(l.b)("li",{parentName:"ul"},"Value type instance points to the data but not the memory address"),Object(l.b)("li",{parentName:"ul"},"Getter and setter functions are called when computed properties are accessed or modified.")))}u.isMDXComponent=!0}},[["YCLL",0,2,1,3]]]);